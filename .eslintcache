[{"/Users/allangallo/Documents/projects/riasam/client/src/index.js":"1","/Users/allangallo/Documents/projects/riasam/client/src/App.js":"2","/Users/allangallo/Documents/projects/riasam/client/src/reportWebVitals.js":"3","/Users/allangallo/Documents/projects/riasam/client/src/components/SideMenu.js":"4","/Users/allangallo/Documents/projects/riasam/client/src/pages/Login.js":"5","/Users/allangallo/Documents/projects/riasam/client/src/util/hooks.js":"6","/Users/allangallo/Documents/projects/riasam/client/src/util/init-firebase.js":"7","/Users/allangallo/Documents/projects/riasam/client/src/util/AuthRoute.js":"8","/Users/allangallo/Documents/projects/riasam/client/src/pages/Home.js":"9","/Users/allangallo/Documents/projects/riasam/client/src/components/Concept.js":"10","/Users/allangallo/Documents/projects/riasam/client/src/components/TableIncomeAndDicount.js":"11","/Users/allangallo/Documents/projects/riasam/client/src/context/userContext.js":"12"},{"size":500,"mtime":1609801462369,"results":"13","hashOfConfig":"14"},{"size":835,"mtime":1610687644312,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1609188436964,"results":"16","hashOfConfig":"14"},{"size":667,"mtime":1609913937917,"results":"17","hashOfConfig":"14"},{"size":1774,"mtime":1610692473207,"results":"18","hashOfConfig":"14"},{"size":505,"mtime":1610384809672,"results":"19","hashOfConfig":"14"},{"size":923,"mtime":1609913786667,"results":"20","hashOfConfig":"14"},{"size":484,"mtime":1610687768005,"results":"21","hashOfConfig":"14"},{"size":11248,"mtime":1610684821140,"results":"22","hashOfConfig":"14"},{"size":2432,"mtime":1610684540984,"results":"23","hashOfConfig":"14"},{"size":1357,"mtime":1610525445263,"results":"24","hashOfConfig":"14"},{"size":1108,"mtime":1610688517077,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"k6ssif",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"/Users/allangallo/Documents/projects/riasam/client/src/index.js",[],["55","56"],"/Users/allangallo/Documents/projects/riasam/client/src/App.js",[],"/Users/allangallo/Documents/projects/riasam/client/src/reportWebVitals.js",[],"/Users/allangallo/Documents/projects/riasam/client/src/components/SideMenu.js",["57","58"],"/Users/allangallo/Documents/projects/riasam/client/src/pages/Login.js",[],"/Users/allangallo/Documents/projects/riasam/client/src/util/hooks.js",[],"/Users/allangallo/Documents/projects/riasam/client/src/util/init-firebase.js",[],"/Users/allangallo/Documents/projects/riasam/client/src/util/AuthRoute.js",["59"],"import React, { useContext } from 'react'\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { UseUser } from \"../context/userContext\";\n\nfunction AuthRoute({ component: Component, ...rest}) {\n    const { user } = UseUser();\n\n    console.log('user', user);\n\n    return (\n        <Route\n            { ...rest }\n            render ={ (props) =>\n                user ? <Component {...props}/> : <Redirect to=\"/login\" />\n            }\n        />\n    )\n}\n\nexport default AuthRoute\n","/Users/allangallo/Documents/projects/riasam/client/src/pages/Home.js",["60","61","62"],"import React, { useState, useContext, useEffect } from 'react'\n\nimport { Form, Grid, Button } from \"semantic-ui-react\";\nimport SemanticDatepicker from 'react-semantic-ui-datepickers';\nimport pdfMake from \"pdfmake/build/pdfmake\";\nimport pdfFonts from \"pdfmake/build/vfs_fonts\";\n\nimport Concept from '../components/Concept';\nimport TableIncomeAndDicount from \"../components/TableIncomeAndDicount\";\nimport { firestore } from \"../util/init-firebase\";\n\nfunction Home() {\n    pdfMake.vfs = pdfFonts.pdfMake.vfs;\n\n    const [incomes, setIncomes] = useState([]);\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n    const [discounts, setDiscounts] = useState([]);\n    const [employees, setEmployees] = useState([])\n    const [employee, setEmployee] = useState('');\n    const [discountsCatalog, setDiscountsCatalog] = useState([]);\n    const [incomesCatalog, setIncomesCatalog] = useState([]);\n    let tableIncomes = [];\n\n    useEffect(() => {\n        //emplooyees\n        firestore.collection(\"employees\")\n            .get()\n            .then( snapshot => {\n                const data = [];\n                snapshot.forEach( doc => {\n                    data.push({\n                        key: doc.id,\n                        text: doc.data().name,\n                        value: doc.id\n                    })\n                });\n\n                setEmployees(data)\n            })\n            .catch(error => console.log(error))\n\n            firestore.collection('incomes')\n            .get()\n            .then( snapshot => {\n                const incomes = [];\n                snapshot.forEach( doc => {\n                    incomes.push({\n                        key: doc.id,\n                        text: doc.data().name,\n                        value: doc.id\n                    });\n                });\n\n                setIncomesCatalog(incomes);\n            })\n            .catch( error => console.log(error));\n\n        firestore.collection('discounts')\n            .get()\n            .then( snapshot => {\n                const discounts = [];\n                snapshot.forEach( doc => {\n                    discounts.push({\n                        key: doc.id,\n                        text: doc.data().name,\n                        value: doc.id\n                    })\n                });\n\n                setDiscountsCatalog(discounts);\n            })\n            .catch( error => console.log(error))\n    }, [])\n\n    function generateCurrentDate(){\n        let date = new Date();\n        let months = [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"];\n        return `${date.getDate()} de ${months[date.getMonth()]} ${date.getFullYear()}`\n    }\n\n    function generateDateFormat(date){\n        let dateFormat = new Date(date);\n        let months = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n\n        return `${dateFormat.getDate()}/${months[dateFormat.getMonth()]}/${dateFormat.getFullYear()}`;\n    }\n\n    Array.prototype.sum = function (prop) {\n        var total = 0;\n        for ( var i = 0, _len = this.length; i < _len; i++ ) {\n            total += parseInt(this[i][prop]);\n        }\n        return total\n    }\n\n    function getDifferenceDays (){\n        let difference = new Date(endDate).getTime() - new Date(startDate).getTime();\n\n        let days = Math.ceil(difference / (1000 * 3600 * 24));\n\n        return days + 1;\n    }\n\n\n    function buildTableBody(columns) {\n        var body = [];\n        var dataRow = [];\n\n        body.push(columns);\n\n\t\tincomes.forEach(function(row, index) {\n            console.log(row, index)\n\n            dataRow.push(\n                {\n                    income: row.name,\n                    quantityIncome: row.quantity,\n                    discount: discounts.length > 0 ? typeof discounts[index] === 'undefined' ? '' : discounts[index].name : '',\n                    quantityDiscount: discounts.length > 0 ? typeof discounts[index] === 'undefined' ? '' : discounts[index].quantity : '',\n                });\n        });\n\n        dataRow.forEach( function (row){\n            body.push([row.income, row.quantityIncome, row.discount, row.quantityDiscount])\n        })\n\n        //totals\n        body.push([\n                    {\n                        text: 'Total ingresos' ,\n                        style: 'total'\n                    },\n                    {\n                        text: incomes.sum('quantity'),\n                        style: 'total'\n                    },\n                    {\n                        text: 'Total deducciones',\n                        style: 'total'\n                    },\n                    {\n                        text: discounts.sum('quantity'),\n                        style: 'total'\n                    }\n                ])\n\t\treturn body;\n\t}\n\n    function generatedPDF () {\n\n        const date = `Fecha: Guatemala, ${generateCurrentDate()}`;\n\n        const rangeDate = `Pago liquido por sueldo correspondiente: ${generateDateFormat(startDate)} - ${generateDateFormat(endDate)}`;\n\n        const days = `Días laborados: ${getDifferenceDays()}`\n\n        const amount = `Liquido a recibir: ${incomes.sum('quantity') - discounts.sum('quantity')}`\n\n        const emp = employees.find( emp => emp.value === employee.value);\n\n        let docDefinition = {\n            content: [\n                {\n                    text: date, style: 'date'\n                },\n                {\n                    text: 'Recibí de: RIASAM', style: 'company'\n                },\n                    rangeDate,\n                    days,\n                {\n                    style: 'table',\n                    layout: 'lightHorizontalLines', // optional\n                    table: {\n                        headerRows: 1,\n                        widths: ['*',100,'*',100],\n                        body: buildTableBody(['Ingresos', '', 'Deducciones', ''])\n                    }\n                },\n                {\n                    text: amount, style: 'amount'\n                },\n                {\n                    text: 'Firma: ______________________________________',\n                    style: 'sign'\n                },\n                {\n                    text: 'Empleado: ' + emp.text,\n                    style: 'sign'\n                },\n                {\n                    text: 'DPI: ',\n                    style: 'sign'\n                }\n              ],\n\n              styles: {\n                date: {\n                    alignment: 'center'\n                },\n                company: {\n                    alignment: 'center',\n                    bold: true,\n                    marginBottom: 20\n                },\n                table: {\n                    margin: [0, 20, 0, 10]\n                },\n                total: {\n                    bold: true,\n                    fontSize: 14\n                },\n                amount: {\n                    margin: [0, 30, 0, 30],\n                    alignment: 'center'\n                },\n                sign: {\n                    alignment: 'center'\n                },\n                header: {\n                  fontSize: 22,\n                  bold: true,\n                  alignment: 'right'\n                },\n                anotherStyle: {\n                  italics: true,\n                  alignment: 'right'\n                }\n              }\n        }\n\n        pdfMake.createPdf(docDefinition).open();\n\n\n    }\n\n    function handleChange (event,data) {\n        event.preventDefault();\n        const { value } = data || event.target;\n\n        const id = employees.find( emp => emp.value === value);\n\n        setEmployee(id);\n    }\n\n    function handleDate (event,data) {\n\n        const { name, value } = data || event.target;\n\n        if (name === 'startDate'){\n            setStartDate(value);\n        }\n        else{\n            setEndDate(value);\n        }\n    }\n\n    function addConcept(concept, type) {\n        const index = type === 'INCOME' ? incomes.findIndex(e => e.id === concept.id) : discounts.findIndex(e => e.id === concept.id);\n        let data = [];\n\n        switch (type) {\n            case 'DISCOUNT':\n                    if (index !== -1){\n                        data = [...discounts];\n                        data[index] = {\n                            ...data[index],\n                            quantity: concept.quantity\n                        }\n\n                        setDiscounts(data)\n                    }else{\n                        setDiscounts([...discounts,{...concept}])\n                    }\n                break;\n            case 'INCOME':\n\n                    if (index !== -1){\n                        data = [ ...incomes ];\n                        data[index] = {\n                            ...data[index],\n                            quantity: concept.quantity\n                        }\n                        setIncomes(data);\n                    }else{\n                        setIncomes([...incomes,{...concept}])\n                    }\n\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <>\n        <Form style={{ marginBottom: 20 }}>\n            <Form.Dropdown\n                name=\"employee\"\n                label=\"Colaborador\"\n                onChange={handleChange}\n                options={employees}\n                fluid\n                selection\n                search\n                placeholder='Colaborador'\n            />\n\n            <SemanticDatepicker label=\"Fecha inicio\"\n                                onChange={handleDate}\n                                format=\"DD-MM-YYYY\"\n                                value={startDate}\n                                allowOnlyNumbers={true}\n                                name=\"startDate\"/>\n\n            <SemanticDatepicker label=\"Fecha fin\"\n                                onChange={handleDate}\n                                format=\"DD-MM-YYYY\"\n                                value={endDate}\n                                name=\"endDate\"/>\n\n            <Button content=\"Generar boleta\"\n                    icon=\"file pdf\"\n\n                    color=\"facebook\"\n                    onClick={generatedPDF}/>\n        </Form>\n\n            {\n                employee &&\n\n                <Grid columns={2} divided>\n                    <Grid.Row>\n\n                    <Grid.Column>\n                        <h2>Ingresos</h2>\n                        <Concept isDiscount={false} addConcept={addConcept} data={incomesCatalog}/>\n\n                        {\n                            incomes.length > 0 && <TableIncomeAndDicount data={incomes}/>\n                        }\n                    </Grid.Column>\n\n                    <Grid.Column>\n                        <h2>Descuentos</h2>\n                        <Concept isDiscount={true} addConcept={addConcept} data={discountsCatalog}/>\n\n                        {\n                            discounts.length > 0 && <TableIncomeAndDicount data={discounts}/>\n                        }\n                        </Grid.Column>\n                    </Grid.Row>\n\n\n                </Grid>\n            }\n        </>\n    )\n}\n\nexport default Home\n","/Users/allangallo/Documents/projects/riasam/client/src/components/Concept.js",[],"/Users/allangallo/Documents/projects/riasam/client/src/components/TableIncomeAndDicount.js",["63"],"import React from 'react'\nimport { Table } from \"semantic-ui-react\";\n\nfunction TableIncomeAndDicount({data}) {\n\n    const rows = data.map( concept => {\n        return (\n            <Table.Row key={concept.id}>\n                <Table.Cell>{concept.name}</Table.Cell>\n                <Table.Cell textAlign=\"center\" >{concept.quantity}</Table.Cell>\n            </Table.Row>\n        )\n    })\n\n    Array.prototype.sum = function (prop) {\n        var total = 0;\n        for ( var i = 0, _len = this.length; i < _len; i++ ) {\n            total += parseInt(this[i][prop]);\n        }\n        return total\n    }\n\n    const total = (\n        <Table.Row >\n            <Table.HeaderCell textAlign=\"center\"> Total </Table.HeaderCell>\n            <Table.HeaderCell textAlign=\"center\"> { data.sum('quantity') } </Table.HeaderCell>\n        </Table.Row>\n    )\n    return (\n        <Table fixed>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Concepto</Table.HeaderCell>\n                    <Table.HeaderCell textAlign=\"center\">Cantidad</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {rows}\n            </Table.Body>\n            <Table.Footer>\n                {total}\n            </Table.Footer>\n        </Table>\n    )\n}\n\nexport default TableIncomeAndDicount;","/Users/allangallo/Documents/projects/riasam/client/src/context/userContext.js",["64"],"import React, { useState, useEffect, useMemo } from 'react';\n\nimport { auth } from \"../util/init-firebase\";\n\nconst userContext = React.createContext();\n\nexport function UserProvider (props) {\n    const [user, setUser] = useState(null);\n\n    function authentication({username, password}) {\n        auth.signInWithEmailAndPassword(username, password)\n            .then( (user) => {\n                console.log(user);\n                setUser(user);\n                return true;\n            })\n            .catch( (error) => {\n                console.error(error);\n                return false;\n            });\n    }\n\n    function signout() {\n        auth.signOut()\n            .then( () => setUser(null))\n    }\n\n    const value = useMemo(() => {\n        return({\n            user,\n            authentication,\n            signout\n        });\n    }, [user]);\n\n    return(\n        <userContext.Provider value={value} {...props} />\n    )\n}\n\nexport function UseUser() {\n     const context = React.useContext(userContext);\n\n     if(!context){\n         throw new Error('Context invalid')\n     }\n\n     return context;\n}",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":2,"column":37,"nodeType":"71","messageId":"72","endLine":2,"endColumn":44},{"ruleId":"69","severity":1,"message":"74","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":27},{"ruleId":"69","severity":1,"message":"74","line":1,"column":27,"nodeType":"71","messageId":"72","endLine":1,"endColumn":37},{"ruleId":"69","severity":1,"message":"75","line":23,"column":9,"nodeType":"71","messageId":"72","endLine":23,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":89,"column":5,"nodeType":"78","messageId":"79","endLine":95,"endColumn":6},{"ruleId":"76","severity":1,"message":"77","line":15,"column":5,"nodeType":"78","messageId":"79","endLine":21,"endColumn":6},{"ruleId":"69","severity":1,"message":"80","line":1,"column":27,"nodeType":"71","messageId":"72","endLine":1,"endColumn":36},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'Segment' is defined but never used.","'useContext' is defined but never used.","'tableIncomes' is assigned a value but never used.","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]